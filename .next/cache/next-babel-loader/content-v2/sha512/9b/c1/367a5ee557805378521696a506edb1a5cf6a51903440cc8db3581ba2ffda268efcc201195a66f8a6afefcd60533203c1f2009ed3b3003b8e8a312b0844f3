{"ast":null,"code":"import shortId from 'shortid';\nimport produce from \"immer\";\nimport faker from \"faker\";\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\n\nexport const initialState = {\n  mainPosts: [//     {\n    //     id:1,\n    //     User:{\n    //         id:1,\n    //         nickname:'황경하',\n    //     },\n    //     content:'첫 번재 게시글 #해시 #리엑트',\n    //     Images:[{ //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\n    //         id: shortId.generate(),\n    //         src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src:\"../images/그림1.png\",\n    //     }],\n    //     Comments: [{\n    //         id: shortId.generate(),\n    //         User:{\n    //             id: shortId.generate(),\n    //             nickname:'he',\n    //         },\n    //         content : \"aaaa\",\n    //\n    //     }],\n    // }\n  ],\n  imagePaths: [],\n  //이미지 업로드시에 이미지 저장\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: false,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }],\n  content: faker.lorem.sentence()\n}));\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\nconst dummyPostAction = data => ({\n  id: data.id,\n  content: data.content,\n  Images: [{\n    src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\"\n  }],\n  User: {\n    id: 1,\n    nickname: '황경하'\n  },\n  Comments: [{\n    User: {\n      nickname: 'he'\n    },\n    content: \"aaaa\"\n  }]\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: shortId.generate(),\n    nickname: '황경하'\n  }\n}); //이전 상태를 액션을 통해 다음상태를 만들어내는 함수가 리듀서다. 불변성을 지키면서.\n//-->produce를 사용하면 불변성이 보장된다.\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 30; //게시물 50개만 보겠다\n\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = action.error;\n        draft.loadPostError = false;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.mainPosts.unshift([dummyPostAction(action.data), ...state.mainPosts]);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = action.error;\n        draft.addPostError = false;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = false;\n        draft.removePostDone = false;\n        draft.removePostError = true;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostDone = false;\n        draft.removePostError = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = action.error;\n        draft.removePostError = true;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentDone = false;\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          /*action.data.comment , userid , postid*/\n\n          /*immer 사용하면 훨씬 쉽게 할 수 있다. */\n\n          /*                const postIndex = state.mainPosts.findIndex((y)=>\r\n                              y.id === action.data.postId);\r\n                          const post = state.mainPosts[postIndex];\r\n                          post.Comments = [dummyComment(action.data.content) , ...post.Comments]; /!*배열의 앞으로 새로운 댓글을 집어넣는다.*!/\r\n                          const mainPosts = [...state.mainPosts];\r\n                          mainPosts[postIndex] = post;\r\n                            return{\r\n                              ...state,\r\n                              addCommentDone: true,\r\n                              addCommentLoading: false,\r\n                          };*/\n          const post = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          post.Comment.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentDone = false;\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["I:/react4/src/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","loadPostLoading","loadPostDone","loadPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","Images","src","image","imageUrl","Comments","content","lorem","sentence","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostRequestAction","data","type","addCommentRequestAction","dummyPostAction","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","findIndex","postId","Comment"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from \"immer\";\r\nimport faker from \"faker\"\r\n\r\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\r\n\r\nexport const initialState = {\r\n    mainPosts : [\r\n    //     {\r\n    //     id:1,\r\n    //     User:{\r\n    //         id:1,\r\n    //         nickname:'황경하',\r\n    //     },\r\n    //     content:'첫 번재 게시글 #해시 #리엑트',\r\n    //     Images:[{ //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src:\"../images/그림1.png\",\r\n    //     }],\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User:{\r\n    //             id: shortId.generate(),\r\n    //             nickname:'he',\r\n    //         },\r\n    //         content : \"aaaa\",\r\n    //\r\n    //     }],\r\n    // }\r\n    ],\r\n    imagePaths:[],//이미지 업로드시에 이미지 저장\r\n    hasMorePost:true,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : false,\r\n\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    loadPostError : false,\r\n\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : false,\r\n\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : false,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) =>     Array(number).fill().map(()=>({\r\n    id: shortId.generate(),\r\n    User:{\r\n        id : shortId.generate(),\r\n        nickname : faker.name.findName()\r\n    },\r\n    Images : [{\r\n        src: faker.image.imageUrl(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n    content : faker.lorem.sentence(),\r\n}));\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPostRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\nexport const addCommentRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPostAction = (data) =>({\r\n    id: data.id,\r\n    content:data.content,\r\n    Images : [{\r\n        src:\"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\",\r\n    },\r\n    ],\r\n    User:{\r\n        id:1,\r\n        nickname:'황경하',\r\n    },\r\n    Comments: [{\r\n        User:{\r\n            nickname:'he',\r\n        },\r\n        content : \"aaaa\",\r\n    }],\r\n})\r\n\r\nconst dummyComment = (data) =>({\r\n    id: shortId.generate(),\r\n    content:data,\r\n    User:{\r\n        id: shortId.generate(),\r\n        nickname:'황경하',\r\n    },\r\n});\r\n\r\n//이전 상태를 액션을 통해 다음상태를 만들어내는 함수가 리듀서다. 불변성을 지키면서.\r\n//-->produce를 사용하면 불변성이 보장된다.\r\nconst reducer = (state = initialState , action) =>{\r\n    return produce(state, (draft)=>{\r\n        switch (action.type) {\r\n\r\n            case LOAD_POST_REQUEST:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 30;\r\n                //게시물 50개만 보겠다\r\n                break;\r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = action.error;\r\n                draft.loadPostError = false;\r\n                break;\r\n\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.mainPosts.unshift([dummyPostAction(action.data), ...state.mainPosts]);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = action.error;\r\n                draft.addPostError = false;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = true;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostDone = false;\r\n                draft.removePostError = false;\r\n                break;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = action.error;\r\n                draft.removePostError = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentDone = false;\r\n                draft.addCommentLoading = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_SUCCESS: {\r\n                /*action.data.comment , userid , postid*/\r\n                /*immer 사용하면 훨씬 쉽게 할 수 있다. */\r\n                /*                const postIndex = state.mainPosts.findIndex((y)=>\r\n                                    y.id === action.data.postId);\r\n                                const post = state.mainPosts[postIndex];\r\n                                post.Comments = [dummyComment(action.data.content) , ...post.Comments]; /!*배열의 앞으로 새로운 댓글을 집어넣는다.*!/\r\n                                const mainPosts = [...state.mainPosts];\r\n                                mainPosts[postIndex] = post;\r\n\r\n                                return{\r\n                                    ...state,\r\n                                    addCommentDone: true,\r\n                                    addCommentLoading: false,\r\n                                };*/\r\n                const post = draft.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                post.Comment.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n            }\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}