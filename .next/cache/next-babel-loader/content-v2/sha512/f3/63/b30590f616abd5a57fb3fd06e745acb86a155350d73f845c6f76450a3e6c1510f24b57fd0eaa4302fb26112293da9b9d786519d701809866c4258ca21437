{"ast":null,"code":"import shortId from 'shortid';\nimport produce from \"immer\";\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '황경하'\n    },\n    content: '첫 번재 게시글 #해시 #리엑트',\n    Images: [{\n      //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: \"../images/그림1.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'he'\n      },\n      content: \"aaaa\"\n    }]\n  }],\n  imagePaths: [],\n  //이미지 업로드시에 이미지 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\nconst dummyPostAction = data => ({\n  id: data.id,\n  content: data.content,\n  Images: [{\n    src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\"\n  }],\n  User: {\n    id: 1,\n    nickname: '황경하'\n  },\n  Comments: [{\n    User: {\n      nickname: 'he'\n    },\n    content: \"aaaa\"\n  }]\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: shortId.generate(),\n    nickname: '황경하'\n  }\n}); //이전 상태를 액션을 통해 다음상태를 만들어내는 함수가 리듀서다. 불변성을 지키면서.\n//-->produce를 사용하면 불변성이 보장된다.\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.mainPosts.unshift([dummyPostAction(action.data), ...state.mainPosts]);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = action.error;\n        draft.addPostError = false;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = false;\n        draft.removePostDone = false;\n        draft.removePostError = true;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostDone = false;\n        draft.removePostError = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = action.error;\n        draft.removePostError = true;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentDone = false;\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          /*action.data.comment , userid , postid*/\n\n          /*immer 사용하면 훨씬 쉽게 할 수 있다. */\n\n          /*                const postIndex = state.mainPosts.findIndex((y)=>\r\n                              y.id === action.data.postId);\r\n                          const post = state.mainPosts[postIndex];\r\n                          post.Comments = [dummyComment(action.data.content) , ...post.Comments]; /!*배열의 앞으로 새로운 댓글을 집어넣는다.*!/\r\n                          const mainPosts = [...state.mainPosts];\r\n                          mainPosts[postIndex] = post;\r\n                            return{\r\n                              ...state,\r\n                              addCommentDone: true,\r\n                              addCommentLoading: false,\r\n                          };*/\n          const post = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          post.Comment.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentDone = false;\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["I:/react4/src/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostRequestAction","data","type","addCommentRequestAction","dummyPostAction","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","findIndex","postId","Comment"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from \"immer\";\r\n\r\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\r\n\r\nexport const initialState = {\r\n    mainPosts : [{\r\n        id:1,\r\n        User:{\r\n            id:1,\r\n            nickname:'황경하',\r\n        },\r\n        content:'첫 번재 게시글 #해시 #리엑트',\r\n        Images:[{ //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\r\n            id: shortId.generate(),\r\n            src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src:\"../images/그림1.png\",\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User:{\r\n                id: shortId.generate(),\r\n                nickname:'he',\r\n            },\r\n            content : \"aaaa\",\r\n\r\n        }],\r\n    }],\r\n    imagePaths:[],//이미지 업로드시에 이미지 저장\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : false,\r\n\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : false,\r\n\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : false,\r\n\r\n};\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPostRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\nexport const addCommentRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPostAction = (data) =>({\r\n    id: data.id,\r\n    content:data.content,\r\n    Images : [{\r\n        src:\"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\",\r\n    },\r\n    ],\r\n    User:{\r\n        id:1,\r\n        nickname:'황경하',\r\n    },\r\n    Comments: [{\r\n        User:{\r\n            nickname:'he',\r\n        },\r\n        content : \"aaaa\",\r\n    }],\r\n})\r\n\r\nconst dummyComment = (data) =>({\r\n    id: shortId.generate(),\r\n    content:data,\r\n    User:{\r\n        id: shortId.generate(),\r\n        nickname:'황경하',\r\n    },\r\n});\r\n\r\n//이전 상태를 액션을 통해 다음상태를 만들어내는 함수가 리듀서다. 불변성을 지키면서.\r\n//-->produce를 사용하면 불변성이 보장된다.\r\nconst reducer = (state = initialState , action) =>{\r\n    return produce(state, (draft)=>{\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.mainPosts.unshift([dummyPostAction(action.data), ...state.mainPosts]);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = action.error;\r\n                draft.addPostError = false;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = true;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostDone = false;\r\n                draft.removePostError = false;\r\n                break;\r\n\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = action.error;\r\n                draft.removePostError = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentDone = false;\r\n                draft.addCommentLoading = true;\r\n                break;\r\n\r\n            case ADD_COMMENT_SUCCESS: {\r\n                /*action.data.comment , userid , postid*/\r\n                /*immer 사용하면 훨씬 쉽게 할 수 있다. */\r\n                /*                const postIndex = state.mainPosts.findIndex((y)=>\r\n                                    y.id === action.data.postId);\r\n                                const post = state.mainPosts[postIndex];\r\n                                post.Comments = [dummyComment(action.data.content) , ...post.Comments]; /!*배열의 앞으로 새로운 댓글을 집어넣는다.*!/\r\n                                const mainPosts = [...state.mainPosts];\r\n                                mainPosts[postIndex] = post;\r\n\r\n                                return{\r\n                                    ...state,\r\n                                    addCommentDone: true,\r\n                                    addCommentLoading: false,\r\n                                };*/\r\n                const post = draft.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                post.Comment.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n            }\r\n\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}