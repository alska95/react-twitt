{"ast":null,"code":"import { all, fork } from \"@redux-saga/core/effects\";\nimport { delay, put, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_REQUEST, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\n\nfunction* SignUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n_c = SignUp;\n\nfunction* LogIn(action) {\n  /*로그인 리퀘스트할때 매개변수로 전달된다.*/\n  try {\n    console.log(\"saga Login\");\n    yield delay(1000);\n    /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n_c2 = LogIn;\n\nfunction* LogOut(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(logOutAPI)*/\n\n    yield put({\n      /*엑션을 만들어줌. dispatch*/\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n_c3 = LogOut;\n\nfunction* Follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: action.data\n    });\n  }\n}\n\n_c4 = Follow;\n\nfunction* UnFollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: action.data\n    });\n  }\n}\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\n\n/*이벤트 리스너들*/\n\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\n\n\n_c5 = UnFollow;\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, LogIn);\n  /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, LogOut);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, SignUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, Follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, UnFollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnFollow), fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SignUp\");\n$RefreshReg$(_c2, \"LogIn\");\n$RefreshReg$(_c3, \"LogOut\");\n$RefreshReg$(_c4, \"Follow\");\n$RefreshReg$(_c5, \"UnFollow\");","map":{"version":3,"sources":["I:/react4/src/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_REQUEST","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SignUp","type","err","console","error","response","data","LogIn","action","log","LogOut","Follow","UnFollow","watchLogin","watchLogout","watchSignup","watchFollow","watchUnFollow","userSaga"],"mappings":"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","sourcesContent":["import {all, fork} from \"@redux-saga/core/effects\";\r\nimport {delay, put, takeLatest} from \"redux-saga/effects\";\r\nimport {\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST\r\n    ,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_REQUEST,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    FOLLOW_FAILURE,\r\n    UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE\r\n} from \"../reducers/user\";\r\n\r\nfunction* SignUp() {\r\n    try {\r\n        // const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* LogIn(action){/*로그인 리퀘스트할때 매개변수로 전달된다.*/\r\n    try{\r\n        console.log(\"saga Login\")\r\n        yield delay(1000)\r\n        /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* LogOut(action){\r\n    try{\r\n        yield delay(1000)\r\n        /*        const result = yield call(logOutAPI)*/\r\n        yield put({/*엑션을 만들어줌. dispatch*/\r\n            type: LOG_OUT_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* Follow(action){\r\n    try{\r\n        yield delay(1000)\r\n        yield put({\r\n            type:FOLLOW_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch (err){\r\n        yield put({\r\n            type:FOLLOW_FAILURE,\r\n            data : action.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* UnFollow(action){\r\n    try{\r\n        yield delay(1000)\r\n        yield put({\r\n            type:UNFOLLOW_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch (err){\r\n        yield put({\r\n            type:UNFOLLOW_FAILURE,\r\n            data : action.data\r\n        })\r\n    }\r\n}\r\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\r\n\r\n/*이벤트 리스너들*/\r\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, LogIn); /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\r\n}\r\nfunction* watchLogout(){\r\n    yield takeLatest(LOG_OUT_REQUEST , LogOut);\r\n}\r\nfunction* watchSignup(){\r\n    yield takeLatest(SIGN_UP_REQUEST, SignUp);\r\n}\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, Follow);\r\n}\r\nfunction* watchUnFollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, UnFollow);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnFollow),\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignup),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}