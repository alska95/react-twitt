{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose } from 'redux';\nimport { createStore } from 'redux';\nimport reducer from '../reducers/index';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n/*리덕스 기능 enhance*/\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  /*if( typeof (action) === 'function'){\r\n      return action(dispatch , getState);\r\n  }*/\n\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [loggerMiddleware, sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["I:/react4/src/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","createSagaMiddleware","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAyBC,OAAzB,QAAuC,OAAvC;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAYC,EAAAA;AAAZ,CAAD,KAA2BC,IAAD,IAAUC,MAAD,IAAU;AAClEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA;AACJ;AACA;;AACI,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAND;;AAOA,MAAMG,cAAc,GAAC,MAAI;AACrB,QAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,QAAMW,WAAW,GAAE,CAACT,gBAAD,EAAoBQ,cAApB,CAAnB;AACA,QAAME,QAAQ,GAAG,QACZhB,OAAO,CAACD,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADK,GAEZZ,mBAAmB,CAACJ,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAFxB;AAIA,QAAME,KAAK,GAAGhB,WAAW,CAACC,OAAD,EAAWc,QAAX,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACH,CAVD;;AAYA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EACzB;AAACQ,EAAAA,KAAK;AAAN,CADyB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\r\nimport {applyMiddleware, compose} from 'redux';\r\nimport {createStore} from 'redux'\r\nimport reducer from '../reducers/index'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas'\r\n/*리덕스 기능 enhance*/\r\nconst loggerMiddleware = ({dispatch , getState}) =>(next) =>(action)=>{\r\n    console.log(action);\r\n    /*if( typeof (action) === 'function'){\r\n        return action(dispatch , getState);\r\n    }*/\r\n    return next(action);\r\n}\r\nconst configureStore=()=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares =[loggerMiddleware , sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV ==='production'\r\n        ?compose(applyMiddleware(...middlewares))\r\n        :composeWithDevTools(applyMiddleware(...middlewares));\r\n\r\n    const store = createStore(reducer , enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore,\r\n    {debug: process.env.NODE_ENV === 'development',\r\n    });\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}