{"ast":null,"code":"import { all, fork, call, take, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { takeEvery } from \"@redux-saga/core/effects\";\n\nfunction logInAPI(data) {\n  /*action.data가 들어온다.*/\n  return axios.port('/api/login', data);\n}\n\nfunction logOutAPI() {\n  return axios.port('/api/logout');\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* LogIn(action) {\n  /*로그인 리퀘스트할때 매개변수로 전달된다.*/\n  try {\n    const result = yield call(logInAPI, action.data);\n    /*===loginApi(action.data)*/\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* LogOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\n\n/*이벤트 리스너들*/\n\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\n\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', LogIn);\n  /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT_REQUEST', LogOut);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}\n/*generator 은 yield단위로 멈추고 , value로 yield 뒤에 쓴 글자를 리턴 가능.\r\n* 중간에 멈출 수 있다!*/","map":{"version":3,"sources":["I:/react4/src/sagas/index.js"],"names":["all","fork","call","take","put","takeLatest","axios","takeEvery","logInAPI","data","port","logOutAPI","addPostAPI","post","LogIn","action","result","type","err","response","addPost","LogOut","watchLogin","watchLogout","watchAddPost","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAcC,IAAd,EAAqBC,IAArB,EAA4BC,IAA5B,EAAmCC,GAAnC,EAAyCC,UAAzC,QAA0D,oBAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,0BAAxB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AAAC;AACpB,SAAOH,KAAK,CAACI,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,SAASE,SAAT,GAAoB;AAChB,SAAOL,KAAK,CAACI,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAASE,UAAT,CAAoBH,IAApB,EAAyB;AACrB,SAAOH,KAAK,CAACO,IAAN,CAAW,WAAX,EAAyBJ,IAAzB,CAAP;AACH;;AACD,UAAUK,KAAV,CAAgBC,MAAhB,EAAuB;AAAC;AACpB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACM,QAAD,EAAYO,MAAM,CAACN,IAAnB,CAAzB;AAAkD;;AAClD,UAAML,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,gBADA;AAENR,MAAAA,IAAI,EAAGO,MAAM,CAACP;AAFR,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,gBADA;AAENR,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUW,OAAV,CAAkBL,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACU,UAAD,EAAcG,MAAM,CAACN,IAArB,CAAzB;AACA,UAAML,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,kBADA;AAENR,MAAAA,IAAI,EAAGO,MAAM,CAACP;AAFR,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,kBADA;AAENR,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUY,MAAV,GAAkB;AACd,MAAG;AACC,UAAML,MAAM,GAAG,MAAMd,IAAI,CAACS,SAAD,CAAzB;AACA,UAAMP,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,iBADA;AAENR,MAAAA,IAAI,EAAGO,MAAM,CAACP;AAFR,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,iBADA;AAENR,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AACJ;AACD;AACA;AACA;;AAIA;;AACA;;;AACA,UAAUa,UAAV,GAAsB;AAClB,QAAMjB,UAAU,CAAC,gBAAD,EAAmBS,KAAnB,CAAhB;AAA2C;AAC9C;;AACD,UAAUS,WAAV,GAAuB;AACnB,QAAMlB,UAAU,CAAC,iBAAD,EAAqBgB,MAArB,CAAhB;AACH;;AACD,UAAUG,YAAV,GAAwB;AACpB,QAAMnB,UAAU,CAAC,kBAAD,EAAsBe,OAAtB,CAAhB;AACH;;AAED,eAAe,UAAUK,QAAV,GAAoB;AAC/B,QAAMzB,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EAENrB,IAAI,CAACsB,WAAD,CAFE,EAGNtB,IAAI,CAACuB,YAAD,CAHE,CAAD,CAAT;AAKH;AAED;AACA","sourcesContent":["import {all , fork , call , take , put , takeLatest} from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport {takeEvery} from \"@redux-saga/core/effects\";\r\n\r\n\r\nfunction logInAPI(data){/*action.data가 들어온다.*/\r\n    return axios.port('/api/login' ,data)\r\n}\r\nfunction logOutAPI(){\r\n    return axios.port('/api/logout')\r\n}\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post' , data)\r\n}\r\nfunction* LogIn(action){/*로그인 리퀘스트할때 매개변수로 전달된다.*/\r\n    try{\r\n        const result = yield call(logInAPI , action.data) /*===loginApi(action.data)*/\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data : result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI , action.data);\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data : result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* LogOut(){\r\n    try{\r\n        const result = yield call(logOutAPI)\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data : result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\r\n\r\n\r\n\r\n/*이벤트 리스너들*/\r\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\r\nfunction* watchLogin(){\r\n    yield takeLatest('LOG_IN_REQUEST', LogIn); /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\r\n}\r\nfunction* watchLogout(){\r\n    yield takeLatest('LOG_OUT_REQUEST' , LogOut);\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST' , addPost);\r\n}\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n\r\n/*generator 은 yield단위로 멈추고 , value로 yield 뒤에 쓴 글자를 리턴 가능.\r\n* 중간에 멈출 수 있다!*/"]},"metadata":{},"sourceType":"module"}