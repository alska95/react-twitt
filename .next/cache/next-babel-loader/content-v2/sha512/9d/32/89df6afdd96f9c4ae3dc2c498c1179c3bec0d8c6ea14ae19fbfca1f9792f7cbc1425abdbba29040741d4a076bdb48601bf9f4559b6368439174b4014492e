{"ast":null,"code":"import { delay, put } from \"redux-saga/effects\";\nimport { all, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport { ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST } from \"../reducers/post\";\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(addPostAPI , action.data);*/\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: action.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["I:/react4/src/sagas/post.js"],"names":["delay","put","all","fork","takeLatest","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","addPost","action","type","data","err","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,GAAf,QAAyB,oBAAzB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,QAAoC,0BAApC;AACA,SAAQC,mBAAR,EAA6BC,mBAA7B,EAAkDC,mBAAlD,EACAC,gBADA,EACkBC,gBADlB,EACoCC,gBADpC,QAC2D,kBAD3D;;AAIA,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA;;AACA,UAAMC,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEJ,gBADA;AAENK,MAAAA,IAAI,EAAGF,MAAM,CAACE;AAFR,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEL,gBADA;AAENM,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,UAAV,CAAqBL,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNY,MAAAA,IAAI,EAACR,mBADC;AAENS,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAOC,GAAP,EAAW;AACR,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNY,MAAAA,IAAI,EAACN,mBADC;AAENO,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUI,YAAV,GAAwB;AACpB,QAAMd,UAAU,CAACM,gBAAD,EAAoBC,OAApB,CAAhB;AAA8C;AACjD;;AAED,UAAUQ,eAAV,GAA2B;AACvB,QAAMf,UAAU,CAACE,mBAAD,EAAuBW,UAAvB,CAAhB;AAAoD;AACvD;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACe,YAAD,CADE,EAENf,IAAI,CAACgB,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {delay, put} from \"redux-saga/effects\";\r\nimport {all, fork, takeLatest} from \"@redux-saga/core/effects\";\r\nimport {ADD_COMMENT_SUCCESS ,ADD_COMMENT_REQUEST ,ADD_COMMENT_FAILURE,\r\nADD_POST_FAILURE ,ADD_POST_SUCCESS ,ADD_POST_REQUEST} from \"../reducers/post\";\r\n\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        yield delay(1000)\r\n        /*        const result = yield call(addPostAPI , action.data);*/\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    }catch (err){\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: action.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST , addPost); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST , addComment); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}