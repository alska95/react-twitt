{"ast":null,"code":"import { delay, put } from \"redux-saga/effects\";\nimport { all, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport { ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_POST_TO_ME } from \"../reducers/post\";\nimport shortId from 'shortid';\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(addPostAPI , action.data);*/\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id: id,\n        content: action.data\n      }\n      /*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: action.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["I:/react4/src/sagas/post.js"],"names":["delay","put","all","fork","takeLatest","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_POST_TO_ME","shortId","addPost","action","id","generate","type","data","content","err","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,GAAf,QAAyB,oBAAzB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,QAAoC,0BAApC;AACA,SACIC,mBADJ,EACyBC,mBADzB,EAC8CC,mBAD9C,EAEIC,gBAFJ,EAEsBC,gBAFtB,EAEwCC,gBAFxC,EAE0DC,cAF1D,QAGO,kBAHP;AAIA,OAAOC,OAAP,MAAoB,SAApB;;AAGA,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AAEC,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA;;AACA,UAAMe,EAAE,GAAGH,OAAO,CAACI,QAAR,EAAX;AACA,UAAMf,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAER,gBADA;AAENS,MAAAA,IAAI,EAAE;AACFH,QAAAA,EAAE,EAAEA,EADF;AAEFI,QAAAA,OAAO,EAAEL,MAAM,CAACI;AAFd;AAGH;;AALG,KAAD,CAAT;AAOA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACN,cADC;AAENO,MAAAA,IAAI,EAACH;AAFC,KAAD,CAAT;AAIH,GAhBD,CAgBC,OAAMK,GAAN,EAAU;AACP,UAAMnB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAET,gBADA;AAENU,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,CAAqBR,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMd,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMC,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACZ,mBADC;AAENa,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EAAEL,MAAM,CAACI;AADd;AAFA,KAAD,CAAT;AAOH,GAVD,CAUC,OAAOE,GAAP,EAAW;AACR,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACV,mBADC;AAENW,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFP,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUK,YAAV,GAAwB;AACpB,QAAMnB,UAAU,CAACM,gBAAD,EAAoBG,OAApB,CAAhB;AAA8C;AACjD;;AAED,UAAUW,eAAV,GAA2B;AACvB,QAAMpB,UAAU,CAACE,mBAAD,EAAuBgB,UAAvB,CAAhB;AAAoD;AACvD;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMvB,GAAG,CAAC,CACNC,IAAI,CAACoB,YAAD,CADE,EAENpB,IAAI,CAACqB,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {delay, put} from \"redux-saga/effects\";\r\nimport {all, fork, takeLatest} from \"@redux-saga/core/effects\";\r\nimport {\r\n    ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE,\r\n    ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_POST_TO_ME\r\n} from \"../reducers/post\";\r\nimport shortId from 'shortid'\r\n\r\n\r\nfunction* addPost(action){\r\n    try{\r\n\r\n        yield delay(1000)\r\n        /*        const result = yield call(addPostAPI , action.data);*/\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id: id,\r\n                content: action.data,\r\n            }, /*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\r\n        })\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:id,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                content: action.data,\r\n            },\r\n        });\r\n\r\n    }catch (err){\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: action.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST , addPost); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST , addComment); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}