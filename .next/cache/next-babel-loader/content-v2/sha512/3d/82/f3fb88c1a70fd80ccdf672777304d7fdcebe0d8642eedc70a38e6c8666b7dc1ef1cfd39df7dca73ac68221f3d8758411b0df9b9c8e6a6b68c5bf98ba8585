{"ast":null,"code":"import { all, call, fork } from \"@redux-saga/core/effects\";\nimport { delay, put, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_REQUEST, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* SignUp(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    const result = yield call(signUpAPI, action.data);\n    console.log('result : ', result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error('err : ', err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* LogIn(action) {\n  /*로그인 리퀘스트할때 매개변수로 전달된다.*/\n  try {\n    const result = yield call(logInAPI, action.data);\n    /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/user/logout', data);\n}\n\nfunction* LogOut(action) {\n  try {\n    const result = yield call(logOutAPI);\n    console.log(result);\n    /*        const result = yield call(logOutAPI)*/\n\n    yield put({\n      /*엑션을 만들어줌. dispatch*/\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* Follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: action.data\n    });\n  }\n}\n\nfunction* UnFollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: action.data\n    });\n  }\n}\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\n\n/*이벤트 리스너들*/\n\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\n\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, LogIn);\n  /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, LogOut);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, SignUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, Follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, UnFollow);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, UnFollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchLoadUser), fork(watchUnFollow), fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}","map":{"version":3,"sources":["I:/react4/src/sagas/user.js"],"names":["all","call","fork","delay","put","takeLatest","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_REQUEST","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_USER_REQUEST","axios","signUpAPI","data","post","SignUp","action","result","console","log","type","err","error","response","logInAPI","LogIn","logOutAPI","LogOut","Follow","UnFollow","watchLogin","watchLogout","watchSignup","watchFollow","watchUnFollow","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import {all, call, fork} from \"@redux-saga/core/effects\";\r\nimport {delay, put, takeLatest} from \"redux-saga/effects\";\r\nimport {\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST\r\n    ,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_REQUEST,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    FOLLOW_FAILURE,\r\n    UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_USER_REQUEST\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction signUpAPI(data){\r\n    return axios.post('/user' , data);\r\n}\r\nfunction* SignUp(action) {\r\n    try {\r\n        // const result = yield call(signUpAPI);\r\n        const result = yield call(signUpAPI , action.data)\r\n        console.log('result : ' , result);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n\r\n        });\r\n    } catch (err) {\r\n        console.error('err : ' , err);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction logInAPI(data){\r\n    return axios.post('/user/login',data)\r\n}\r\nfunction* LogIn(action){/*로그인 리퀘스트할때 매개변수로 전달된다.*/\r\n    try{\r\n        const result = yield call(logInAPI , action.data)\r\n        /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(data){\r\n    return axios.post('/user/logout' , data);\r\n}\r\nfunction* LogOut(action){\r\n    try{\r\n        const result = yield call(logOutAPI);\r\n        console.log(result);\r\n        /*        const result = yield call(logOutAPI)*/\r\n        yield put({/*엑션을 만들어줌. dispatch*/\r\n            type: LOG_OUT_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* Follow(action){\r\n    try{\r\n        yield delay(1000)\r\n        yield put({\r\n            type:FOLLOW_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch (err){\r\n        yield put({\r\n            type:FOLLOW_FAILURE,\r\n            data : action.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* UnFollow(action){\r\n    try{\r\n        yield delay(1000)\r\n        yield put({\r\n            type:UNFOLLOW_SUCCESS,\r\n            data : action.data\r\n        })\r\n    }catch (err){\r\n        yield put({\r\n            type:UNFOLLOW_FAILURE,\r\n            data : action.data\r\n        })\r\n    }\r\n}\r\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\r\n\r\n/*이벤트 리스너들*/\r\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, LogIn); /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\r\n}\r\nfunction* watchLogout(){\r\n    yield takeLatest(LOG_OUT_REQUEST , LogOut);\r\n}\r\nfunction* watchSignup(){\r\n    yield takeLatest(SIGN_UP_REQUEST, SignUp);\r\n}\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, Follow);\r\n}\r\nfunction* watchUnFollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, UnFollow);\r\n}\r\nfunction* watchLoadUser(){\r\n    yield takeLatest(LOAD_USER_REQUEST, UnFollow);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchLoadUser),\r\n        fork(watchUnFollow),\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignup),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}