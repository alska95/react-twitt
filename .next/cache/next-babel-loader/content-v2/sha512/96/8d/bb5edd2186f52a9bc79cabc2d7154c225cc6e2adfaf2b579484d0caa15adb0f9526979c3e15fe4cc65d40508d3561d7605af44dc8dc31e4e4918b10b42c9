{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '황경하'\n    },\n    content: '첫 번재 게시글 #해시 #리엑트',\n    Images: [{\n      //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: \"../images/그림1.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'he'\n      },\n      content: \"aaaa\"\n    }]\n  }],\n  imagePaths: [],\n  //이미지 업로드시에 이미지 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\nconst dummyPostAction = data => ({\n  id: data.id,\n  content: data.content,\n  Images: [{\n    src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\"\n  }],\n  User: {\n    id: 2,\n    nickname: '황경하'\n  },\n  Comments: [{\n    User: {\n      nickname: 'he'\n    },\n    content: \"aaaa\"\n  }]\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: shortId.generate(),\n    nickname: '황경하'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: false,\n        addPostError: false,\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [action.data, ...state.mainPosts],\n        addPostDone: true,\n        addPostError: false,\n        addPostLoading: false\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: false,\n        addPostError: action.error,\n        addPostLoading: false\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostDone: false,\n        removePostError: false,\n        removePostLoading: true\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n        removePostDone: true,\n        removePostError: false,\n        removePostLoading: false\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostDone: false,\n        removePostError: action.error,\n        removePostLoading: false\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: false,\n        addCommentLoading: true\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        /*action.data.comment , userid , postid*/\n\n        /*immer 사용하면 훨씬 쉽게 할 수 있다. */\n        const postIndex = state.mainPosts.findIndex(y => y.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        /*배열의 앞으로 새로운 댓글을 집어넣는다.*/\n\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentDone: true,\n          addCommentLoading: false\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return {\n        addCommentDone: false,\n        addCommentError: action.error,\n        addCommentLoading: false\n      };\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["I:/react4/src/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostRequestAction","data","type","addCommentRequestAction","dummyPostAction","dummyComment","reducer","state","action","error","filter","v","postIndex","findIndex","y","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\n/*더미데이터 생성\r\n* 1.shortId : 겹치기 힘든 아이디를 생성해준다.\r\n* 2.faker : 각종 더미데이터 제공*/\r\n\r\nexport const initialState = {\r\n    mainPosts : [{\r\n        id:1,\r\n        User:{\r\n            id:1,\r\n            nickname:'황경하',\r\n        },\r\n        content:'첫 번재 게시글 #해시 #리엑트',\r\n        Images:[{ //시퀄라이즈 시 대문자로 반환되기에 대문자로 (조인연산인듯?)\r\n            id: shortId.generate(),\r\n            src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src:\"../images/그림1.png\",\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User:{\r\n                id: shortId.generate(),\r\n                nickname:'he',\r\n            },\r\n            content : \"aaaa\",\r\n\r\n        }],\r\n    }],\r\n    imagePaths:[],//이미지 업로드시에 이미지 저장\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : false,\r\n\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : false,\r\n\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : false,\r\n\r\n};\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPostRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\nexport const addCommentRequestAction = (data) =>({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPostAction = (data) =>({\r\n    id: data.id,\r\n    content:data.content,\r\n    Images : [{\r\n        src:\"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAyMTZfNTkg%2FMDAxNjEzNDUzMDkzODQx.7efhBANV9v18I0DUQhH-Tc27xuI5uYSc0E6GYhoGJNEg.FKljN_JtNtpnt6jLFmXp9xXAdatehRbeMnQbxN54To4g.PNG.kcm2874%2F%25C1%25A6%25B8%25F1%25C0%25BB_%25C0%25D4%25B7%25C2%25C7%25D8%25C1%25D6%25BC%25BC%25BF%25E4._001_%2528100%2529.png&type=sc960_832\",\r\n    },\r\n    ],\r\n    User:{\r\n        id:2,\r\n        nickname:'황경하',\r\n    },\r\n    Comments: [{\r\n        User:{\r\n            nickname:'he',\r\n        },\r\n        content : \"aaaa\",\r\n    }],\r\n})\r\n\r\nconst dummyComment = (data) =>({\r\n    id: shortId.generate(),\r\n    content:data,\r\n    User:{\r\n        id: shortId.generate(),\r\n        nickname:'황경하',\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState , action) =>{\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST:\r\n            return{\r\n                ...state,\r\n                addPostDone: false,\r\n                addPostError: false,\r\n                addPostLoading: true,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return{\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                addPostDone: true,\r\n                addPostError: false,\r\n                addPostLoading: false,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return{\r\n                ...state,\r\n                addPostDone: false,\r\n                addPostError: action.error,\r\n                addPostLoading: false,\r\n            };\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            return{\r\n                ...state,\r\n                removePostDone: false,\r\n                removePostError: false,\r\n                removePostLoading: true,\r\n            };\r\n        case REMOVE_POST_SUCCESS:\r\n            return{\r\n                ...state,\r\n                mainPosts: state.mainPosts.filter((v)=>v.id !== action.data),\r\n                removePostDone: true,\r\n                removePostError: false,\r\n                removePostLoading: false,\r\n            };\r\n        case REMOVE_POST_FAILURE:\r\n            return{\r\n                ...state,\r\n                removePostDone: false,\r\n                removePostError: action.error,\r\n                removePostLoading: false,\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return{\r\n                ...state,\r\n                addCommentDone: false,\r\n                addCommentLoading: true,\r\n            };\r\n        case ADD_COMMENT_SUCCESS:{\r\n            /*action.data.comment , userid , postid*/\r\n            /*immer 사용하면 훨씬 쉽게 할 수 있다. */\r\n            const postIndex = state.mainPosts.findIndex((y)=>\r\n                y.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            post.Comments = [dummyComment(action.data.content) , ...post.Comments]; /*배열의 앞으로 새로운 댓글을 집어넣는다.*/\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n\r\n            return{\r\n                ...state,\r\n                addCommentDone: true,\r\n                addCommentLoading: false,\r\n            };\r\n        }\r\n\r\n        case ADD_COMMENT_FAILURE:\r\n            return{\r\n                addCommentDone: false,\r\n                addCommentError: action.error,\r\n                addCommentLoading: false,\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            };\r\n    }\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}