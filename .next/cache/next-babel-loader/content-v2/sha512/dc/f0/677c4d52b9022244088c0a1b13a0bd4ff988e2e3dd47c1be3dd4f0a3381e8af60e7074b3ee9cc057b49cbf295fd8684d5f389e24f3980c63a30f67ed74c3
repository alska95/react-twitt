{"ast":null,"code":"import { delay, put } from \"redux-saga/effects\";\nimport { all, call, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport { ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_POST_TO_ME, REMOVE_POST_OF_ME, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, generateDummyPost } from \"../reducers/post\";\nimport shortId from 'shortid';\nimport axios from \"axios\";\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(addPostAPI , action.data);*/\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n      /*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    /*        const result = yield call(addPostAPI , action.data);*/\n\n    /*        const id = shortId.generate();*/\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n      /*            data: {\r\n                      id: id,\r\n                      content: result.data,\r\n                  }, /!*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*!/*/\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(addPostAPI , action.data);*/\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n      /*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/comment`, data); //Post /comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n  /*요청을 2초에 한번만 받아들임*/\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["I:/react4/src/sagas/post.js"],"names":["delay","put","all","call","fork","takeLatest","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","generateDummyPost","shortId","axios","loadPost","action","type","data","err","response","addPostAPI","post","content","addPost","result","id","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {delay, put} from \"redux-saga/effects\";\r\nimport {all, call, fork, takeLatest} from \"@redux-saga/core/effects\";\r\nimport {\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_TO_ME,\r\n    REMOVE_POST_OF_ME,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_POST_FAILURE, LOAD_POST_REQUEST, generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport shortId from 'shortid'\r\nimport axios from \"axios\";\r\n\r\nfunction* loadPost(action){\r\n    try{\r\n\r\n        yield delay(1000)\r\n        /*        const result = yield call(addPostAPI , action.data);*/\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: generateDummyPost(10),/*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/post', {content :data})\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n\r\n        const result = yield call(addPostAPI ,action.data);\r\n        /*        const result = yield call(addPostAPI , action.data);*/\r\n/*        const id = shortId.generate();*/\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n/*            data: {\r\n                id: id,\r\n                content: result.data,\r\n            }, /!*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*!/*/\r\n        })\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:result.data.id,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* removePost(action){\r\n    try{\r\n\r\n        yield delay(1000)\r\n        /*        const result = yield call(addPostAPI , action.data);*/\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data, /*엑션에서 리퀘스트 받아와서 석세스를 넘겨줌 , 데이터에는 사용자가 넣은 데이터가 들어있다.*/\r\n        })\r\n        yield put({\r\n            type:REMOVE_POST_OF_ME,\r\n            data:action.data,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/comment` , data); //Post /comment\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST , addPost); /*요청을 2초에 한번만 받아들임*/\r\n}\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST , loadPost); /*요청을 2초에 한번만 받아들임*/\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST , removePost); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST , addComment); /*요청을 2초에 한번만 받아들임*/\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}