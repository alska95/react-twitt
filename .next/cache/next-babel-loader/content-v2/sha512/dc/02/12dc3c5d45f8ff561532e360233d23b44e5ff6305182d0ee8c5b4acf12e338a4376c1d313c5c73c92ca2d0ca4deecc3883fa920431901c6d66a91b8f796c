{"ast":null,"code":"import _defineProperty from \"I:/react4/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {}; //비동기 액션 크리에이터(saga)\n//이전 상태와 action을 통해 다음 상태를 만들어내는 함수\n//combinereducer\n//리듀서가 함수인데 이거 다 합쳐준다.\n\nconst rootReducer = combineReducers({\n  index: (state = initialState, action) => {\n    //서버사이드 랜더링 위해\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        {\n          return state;\n        }\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["I:/react4/src/reducers/index.js"],"names":["user","post","combineReducers","HYDRATE","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAE,EAApB,C,CAGA;AAEA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAC,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAgC;AAAE;AACpC,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKN,OAAL;AACIO,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,MAAtB;AACA,+CAAWD,KAAX,GAAsBC,MAAM,CAACI,OAA7B;;AACJ;AAAQ;AACJ,iBAAOL,KAAP;AACH;AANL;AAQH,GAV+B;AAWhCP,EAAAA,IAXgC;AAYhCC,EAAAA;AAZgC,CAAD,CAAnC;AAcA,eAAeI,WAAf","sourcesContent":["import user from \"./user\"\r\nimport post from \"./post\"\r\nimport {combineReducers} from \"redux\";\r\nimport {HYDRATE} from \"next-redux-wrapper\";\r\n\r\nconst initialState ={\r\n};\r\n\r\n//비동기 액션 크리에이터(saga)\r\n\r\n//이전 상태와 action을 통해 다음 상태를 만들어내는 함수\r\n//combinereducer\r\n//리듀서가 함수인데 이거 다 합쳐준다.\r\nconst rootReducer = combineReducers({\r\n    index:(state = initialState, action)=>{ //서버사이드 랜더링 위해\r\n        switch (action.type){\r\n            case HYDRATE:\r\n                console.log('HYDRATE',action);\r\n                return {...state , ...action.payload};\r\n            default:{\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n});\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}