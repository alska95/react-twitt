{"ast":null,"code":"import { all, fork } from \"@redux-saga/core/effects\";\nimport { delay, put, takeLatest } from \"redux-saga/effects\";\n\nfunction* LogIn(action) {\n  /*로그인 리퀘스트할때 매개변수로 전달된다.*/\n  try {\n    yield delay(1000);\n    /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* LogOut(action) {\n  try {\n    yield delay(1000);\n    /*        const result = yield call(logOutAPI)*/\n\n    yield put({\n      /*엑션을 만들어줌.*/\n      type: 'LOG_OUT_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\n\n/*이벤트 리스너들*/\n\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\n\n\nfunction* watchLogin() {\n  console.log(\"saga Login\");\n  yield takeLatest('LOG_IN_REQUEST', LogIn);\n  /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT_REQUEST', LogOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["I:/react4/src/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","LogIn","action","type","data","err","response","LogOut","watchLogin","console","log","watchLogout","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,QAAwB,0BAAxB;AACA,SAAQC,KAAR,EAAeC,GAAf,EAAoBC,UAApB,QAAqC,oBAArC;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AAAC;AACpB,MAAG;AACC,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA;;AACA,UAAMC,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAGF,MAAM,CAACE;AAFR,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMN,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,MAAV,CAAiBL,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA;;AACA,UAAMC,GAAG,CAAC;AAAC;AACPI,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAGF,MAAM,CAACE;AAFR,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMN,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;AACD;AACA;AACA;;AAEA;;AACA;;;AACA,UAAUI,UAAV,GAAsB;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMV,UAAU,CAAC,gBAAD,EAAmBC,KAAnB,CAAhB;AAA2C;AAC9C;;AACD,UAAUU,WAAV,GAAuB;AACnB,QAAMX,UAAU,CAAC,iBAAD,EAAqBO,MAArB,CAAhB;AACH;;AAED,eAAe,UAAUK,QAAV,GAAoB;AAC/B,QAAMhB,GAAG,CAAC,CACNC,IAAI,CAACW,UAAD,CADE,EAENX,IAAI,CAACc,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, fork} from \"@redux-saga/core/effects\";\r\nimport {delay, put, takeLatest} from \"redux-saga/effects\";\r\n\r\nfunction* LogIn(action){/*로그인 리퀘스트할때 매개변수로 전달된다.*/\r\n    try{\r\n        yield delay(1000)\r\n        /*const result = yield call(logInAPI , action.data) /!*===loginApi(action.data)*!/*/\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data : action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* LogOut(action){\r\n    try{\r\n        yield delay(1000)\r\n        /*        const result = yield call(logOutAPI)*/\r\n        yield put({/*엑션을 만들어줌.*/\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data : action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n/*put은 dispatch 역할\r\n* fork 는 비동기 함수호출 ( 결과 안기다리고 바로 다음꺼 실행)\r\n* call 은 동기 함수호출*/\r\n\r\n/*이벤트 리스너들*/\r\n/*take은 1회용이기때문에 while로 감싼다 === takeEvery*/\r\nfunction* watchLogin(){\r\n    console.log(\"saga Login\")\r\n    yield takeLatest('LOG_IN_REQUEST', LogIn); /*takeLatest : 실수로 더블클릭하면 마지막꺼만 받음.*/\r\n}\r\nfunction* watchLogout(){\r\n    yield takeLatest('LOG_OUT_REQUEST' , LogOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}